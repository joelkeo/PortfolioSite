((3) 0 () 0 () () (h - () (metas h - () (here-path . "/Users/joelkeohane/Downloads/basement_audio/pollenSite2/joel.html.pp")) (doc u . "<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n</head>\n\n\n\n\n\n\n\n\n<details style = \"border: 8px solid black;width: 50%;margin-left: 0;list-style: none;\"> <summary style = > <h1 style = \"font-size: 100px;display : inline;\"> Joel Keohane: software developer </h1> </summary><details style = \"border: 4px solid black;width: calc(100% - 16px);;margin-left: 16;list-style: none;\"> <summary style = > <h1 style = \"font-size: 50px;display : inline;\"> Grainferno </h1> </summary><details style = \"border: 2px solid black;width: calc(100% - 8px);;margin-left: 8;list-style: none;\"> <summary style = > <h1 style = \"font-size: 25px;display : inline;\"> DSP & Realtime Capabilities </h1> </summary><p style = \"font-size: 25/4px;\"> A realtime .vst synthesizer must process input MIDI and return an audio buffer in < 1ms.\nThis meant that I had to be extremely careful about even the tiniest of details. Stack frame creation,\n conditionals, memory allocation, and complex operations needed to be avoided or optimized. I used\nprofiling tools to eliminate bottlenecks, and used precomputed LUT buffers,\nlazy modulator computation, and other techniques to ensure glitch-free audio and low CPU usage. </p> </details> </details><p style = \"font-size: 25px;\"> Inertia </p> </details>\n")))