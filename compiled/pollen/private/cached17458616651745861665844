((3) 0 () 0 () () (h - () (metas h - () (here-path . "/Users/joelkeohane/Downloads/basement_audio/pollenSite2/joel.html.pp")) (doc u . "<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />\n  <script src=\"emojicon.js\" defer></script>\n</head>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<details style = \"border: 8.0px solid #9A5F83;;;width: 80%;margin-left: 0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 100.0px;margin-left: 64.0px;margin-top: 32.0px;margin-bottom: 32.0px;display : inline-block;\"> Joel ... </h1><h2 style = \"font-size: 100.0px;margin-left: 64.0px;margin-top: 32.0px;margin-bottom: 32.0px;text-align: right;display : inline;\" id = \"blinky\">  </h2><img style = \"width : 30%;text-align: right;vertical-align: middle;display: inline;\" src = \"joel.jpeg\"/> </summary><p style = \"font-size: 62.5px;margin-left: 80.0px;margin-top: 5.0px;margin-bottom: 20.0px;\"> I build audio tools and compilers.\nI specialize in C++, JUCE, and functional programming.\nHere are some of my favorite projects. </p><details style = \"border: 5.0px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 80.0px);margin-left: 80.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 62.5px;margin-left: 40.0px;margin-top: 20.0px;margin-bottom: 20.0px;display : inline-block;\"> Grainferno </h1> </summary><p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> Grainferno is a tool for music producers to warp and generate new sounds with - a .vst3/.au granular synthesizer with tonal granulation and\n modulation capabilities, written in C++/JUCE. The DSP, the Modulation System, & the GUI were all written and designed from scratch. </p><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Overview Video </h1> </summary><iframe style = \"\" <iframe width=\"560\" height=\"315\" src=\" https://www.youtube.com/embed/NONVJkHRQGQ?si=I1Oa3icLhFJ5lz0M \" title=\"YouTube video player\"\nframeborder=\"0\" allow=\"accelerometer;\nautoplay; clipboard-write; encrypted-media;\ngyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>>  </iframe> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> DSP & Realtime Capabilities </h1> </summary><p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> A realtime .vst synthesizer must process input MIDI and return an audio buffer in < 1ms.\nThis meant that I had to be extremely careful about even the tiniest of details. Stack frame creation,\n conditionals, memory allocation, and complex operations needed to be avoided or optimized. I used\nprofiling tools to eliminate bottlenecks, and used precomputed LUT buffers,\nlazy modulator computation, and other techniques to ensure glitch-free audio and low CPU usage. </p> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Modular System </h1> </summary><p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> Modern synths often offer flexible, drag and drop modulations, and grainferno is no exception.\nSuch flexibility means that DSP computations cannot work with static (per buffer) parameter values:\nmodulations must first be applied, from various sources. Additionally, the state of these modulators may\ndiffer per synth voice. JUCE Parameters are held in a Modulation Matrix class which can load up voice-specific state,\n and then return the modulated parameter values at a specific point in time. </p> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Distribution </h1> </summary><p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> From the very beginning, grainferno was designed with the end-user in mind. This meant that it needed to be usable\neven for users with no programming experience, and limited systems and synthesizer knowlege. For every beta, I've made sure\nthe .vst3 or .au file would automatically pass validations and not trigger any serious anti-malware. The most recent\n betas have also featured MacOS and Windows installers. I've also\nmade various release and demo videos, explaining how to install and use the software. All of this has been\norganized via discord, where users (over 400) can also provide feedback regarding bugs or feature suggestions.\nI plan to release the plugin as a paid product when development has finished. The page for that is already\n in the works! </p><a style = \"\" href = \" https://infernoaud.io/ \"> <p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> inferno audio site </p> </a> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> GUI </h1> </summary><p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> I designed the GUI to be unique and interactive, while still being intuitive. Grain generation feedback is\nshown over the sample window (grain position, amplitude, and compression) and behind the envelopes\n(waveform of the most recently generated game. Modulation amounts are also displayed, and LFOs and drawable. </p> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Novelty </h1> </summary><p style = \"font-size: 24.4140625px;margin-left: 31.25px;margin-top: 1.953125px;margin-bottom: 7.8125px;\"> I wanted grainferno to provide high quality sound and an intuivitve interface, but also some brand new\nfeatures for users to play with. Initially this was \"tonal granulation\": the ability to generate grains at\naudio rate, keytracked to the note being played. This required grain positions to be able to exist between sample positions\n(solved with sinc interpolation/fractional delays). However, months into development, Serum 2 brought this exact\nfeature to users with an even more powerful modulation system, and additional FX. To remain competitive, I developed\n\"Granular Compression\", a novel granular feature, which compresses individual grain upwards in volume. </p> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Testimonials/In Use </h1> </summary><details style = \"border: 1.953125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 31.25px);margin-left: 31.25px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 24.4140625px;margin-left: 15.625px;margin-top: 7.8125px;margin-bottom: 7.8125px;display : inline-block;\"> 3 hr user livestream </h1> </summary><iframe style = \"\" <iframe width=\"560\" height=\"315\" src=\" https://www.youtube.com/embed/HE6LvhV38eU?si=8WNUta11MSuxUtSC \" title=\"YouTube video player\"\nframeborder=\"0\" allow=\"accelerometer;\nautoplay; clipboard-write; encrypted-media;\ngyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>>  </iframe> </details><details style = \"border: 1.953125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 31.25px);margin-left: 31.25px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 24.4140625px;margin-left: 15.625px;margin-top: 7.8125px;margin-bottom: 7.8125px;display : inline-block;\"> Made w/ Grainferno, posted to the discord </h1> </summary><audio controls> <source src = \"grain.wav\" type = \"audio/wav\"> </audio><audio controls> <source src = \"Welcome 2 my Wor1d 140bpm.wav\" type = \"audio/wav\"> </audio><audio controls> <source src = \"an assortment of textures and cool sounds.wav\" type = \"audio/wav\"> </audio><audio controls> <source src = \"final teaser.wav\" type = \"audio/wav\"> </audio><audio controls> <source src = \"tweaked spaces.mp3\" type = \"audio/mp3\"> </audio><audio controls> <source src = \"berlin 120bpm prod 1kkhei.mp3\" type = \"audio/mp3\"> </audio> </details> </details><details style = \"border: 3.125px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 50.0px);margin-left: 50.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 39.0625px;margin-left: 25.0px;margin-top: 12.5px;margin-bottom: 12.5px;display : inline-block;\"> Demo Video: Crazy Sounds </h1> </summary><iframe style = \"\" <iframe width=\"560\" height=\"315\" src=\" https://www.youtube.com/embed/_madxtR7E30?si=GmM1NFfWLiS0FQs6 \" title=\"YouTube video player\"\nframeborder=\"0\" allow=\"accelerometer;\nautoplay; clipboard-write; encrypted-media;\ngyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>>  </iframe> </details> </details><details style = \"border: 5.0px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 80.0px);margin-left: 80.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 62.5px;margin-left: 40.0px;margin-top: 20.0px;margin-bottom: 20.0px;display : inline-block;\"> Inertia </h1> </summary><p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> Open Source MIDI fx plugin built from scratch, using concept\n of rhythm phase & rate to generate arpeggios with dynamic tempos that align to the host at the start & end.\nThe Repo has a great explanation of the logic behind it, as well as all of the code! </p><a style = \"\" href = \" https://github.com/joelkeo/ERG \"> <p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> github </p> </a> </details><details style = \"border: 5.0px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 80.0px);margin-left: 80.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 62.5px;margin-left: 40.0px;margin-top: 20.0px;margin-bottom: 20.0px;display : inline-block;\"> NightSnake </h1> </summary><p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> Written in Ocaml & C and targetting ASM, Night Snake was my groups final project in the Compilers course at\n Northeastern (CS4410). We wanted to allow the language (which up to that point had ids, math operations,\nlambdas, recursion, and many other features) to deal with BigNums. We came up with what is potentially a novel\napproach to computing bigNums, optimizing subtraction and addition by including in the bigNum memory represtation\ntwo carry-bits. You can read more about it in the slides! The multiplication slide is particularly fun. </p><iframe style = \"\" <iframe width=\"560\" height=\"315\" src=\" https://docs.google.com/presentation/d/e/2PACX-1vRo0LtcL4JlhMUE3sMBzbuZxFla291ZIeSNklyfciFg2uXRD7twy50gcmlQQNXNMZhVLaWdMxLaazwE/pubembed?start=false&loop=false&delayms=60000 \" title=\"YouTube video player\"\nframeborder=\"0\" allow=\"accelerometer;\nautoplay; clipboard-write; encrypted-media;\ngyroscope; picture-in-picture; web-share\"\nreferrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>>  </iframe> </details><details style = \"border: 5.0px solid #9A5F83;border-right: 0;border-bottom: 0;width: width: calc(100% - 80.0px);margin-left: 80.0px;list-style: none;\"> <summary style = \"list-style: none;\"> <h1 style = \"font-size: 62.5px;margin-left: 40.0px;margin-top: 20.0px;margin-bottom: 20.0px;display : inline-block;\"> This Site </h1> </summary><p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> I used this website an excuse to delve back into Racket. I ended up making a mini HTML/CSS compiler which ...\ndoesn't necessarily accomplish all that much that can't be done in plain CSS, but was a lot of fun to build.\nIt was a great functional programming refresher! You can check out the source code on GitHub. </p><a style = \"\" href = \" https://github.com/joelkeo/PortfolioSite \"> <p style = \"font-size: 39.0625px;margin-left: 50.0px;margin-top: 3.125px;margin-bottom: 12.5px;\"> github </p> </a> </details> </details>\n")))